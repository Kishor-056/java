                                     ---ASSINGMENT -02 ----


11) Matrix Multiplication:-

class Main
{
    public static void main(String[] args)
    {
        int[][] mat1 = {{1, 2}, {5, 3}};
        int[][] mat2 = {{2, 3}, {4, 1}};
        int[][] result = new int[2][2];

        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                for (int k = 0; k < 2; k++) {
                    result[i][j] += mat1[i][k] * mat2[k][j];
                }
            }
        }

        System.out.println("Mat Product =");
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                System.out.print(result[i][j] + " ");
            }
            System.out.println();
        }
    }
}

12) Matrix Addition:-
   

class Main
{
    public static void main(String[] args)
    {
        int[][] mat1 = {{1, 2}, {5, 3}};
        int[][] mat2 = {{2, 3}, {4, 1}};
        int[][] result = new int[2][2];

        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                result[i][j] = mat1[i][j] + mat2[i][j];
            }
        }

        System.out.println("Mat Sum =");
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                System.out.print(result[i][j] + " ");
            }
            System.out.println();
    }
}
}   


13) Merge two sorted arrays:-

import java.util.ArrayList;
import java.util.Collections;

public class MergeSortedArrays {
    public static void main(String[] args) {
        int[] arr1 = {1, 3, 4, 5};
        int[] arr2 = {2, 4, 6, 8};
        ArrayList<Integer> arr3 = new ArrayList<>();

        for (int i : arr1) {
            arr3.add(i);
        }
        for (int i : arr2) {
            arr3.add(i);
        }

        Collections.sort(arr3);

        System.out.println("Merged Array = " + arr3);
    }
}


14)  Find the Mean, Median, Mode of the array of the Numbers:-

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Statistics {
    public static void main(String[] args) {
        int[] array = {16, 18, 27, 16, 23, 21, 19};
        
        double mean = calculateMean(array);
        double median = calculateMedian(array);
        int mode = calculateMode(array);
        
        System.out.println("Mean = " + mean);
        System.out.println("Median = " + median);
        System.out.println("Mode = " + mode);
    }
    
    public static double calculateMean(int[] array) {
        double sum = 0;
        for (int num : array) {
            sum += num;
        }
        return sum / array.length;
    }
    
    public static double calculateMedian(int[] array) {
        Arrays.sort(array);
        int middle = array.length / 2;
        if (array.length % 2 == 0) {
            return (array[middle - 1] + array[middle]) / 2.0;
        } else {
            return array[middle];
        }
    }
    
    public static int calculateMode(int[] array) {
        HashMap<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : array) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        int mode = array[0];
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxCount = entry.getValue();
                mode = entry.getKey();
            }
        }
        return mode;
    }
}

15) Find the Number of composite Numbers in an array:-


class Main {
    public static void main(String[] args) {
        int[] array = {16, 18, 27, 16, 23, 21, 19};
        int count = countCompositeNumbers(array);
        System.out.println("Number of Composite Numbers = " + count);
    }
    
    public static boolean isComposite(int num) {
        if (num <= 1) return false;
        if (num == 2 || num == 3) return false;
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) return true;
        }
        return false;
    }
    
    public static int countCompositeNumbers(int[] array) {
        int count = 0;
        for (int num : array) {
            if (isComposite(num)) {
                count++;
            }
        }
        return count;
    }
}


16)  Right Triangle Star Pattern:-

class Main {
    public static void main(String[] args) {
        int n = 5; // You can change the value of n as needed

        for (int i = 1; i <= n; i++) {
            for (int j = i; j < n; j++) {
                System.out.print("  ");
            }
            for (int j = 1; j <= i; j++) {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}

17)  Pascal's Triangle pattern:-

class Main {
    public static void main(String[] args) {
        int n = 5; // You can change the value of n as needed
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - i; j++) {
                System.out.print(" ");
            }
            int number = 1;
            for (int j = 0; j <= i; j++) {
                System.out.print(number + " ");
                number = number * (i - j) / (j + 1);
            }
            System.out.println();
        }
    }
}


18) Rectangle Symbol Pattern:-

import java.util.Scanner;

class Main
{
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the symbol to be used: ");
        char symbol = scanner.next().charAt(0);
        System.out.println("Enter the number of rows: ");
        int rows = scanner.nextInt();
        System.out.println("Enter the number of columns: ");
        int cols = scanner.nextInt();

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                System.out.print(symbol + " ");
            }
            System.out.println();
        }
    }
}

19)  Number Pattern:-


import java.util.Scanner;

public class NumberPattern {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the number to be printed: ");
        int number = scanner.nextInt();
        System.out.println("Max number of times to be printed: ");
        int maxTimes = scanner.nextInt();

        for (int i = 1; i <= maxTimes; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(number);
            }
            System.out.println();
        }
        for (int i = maxTimes - 1; i >= 1; i--) {
            for (int j = 1; j <= i; j++) {
                System.out.print(number);
            }
            System.out.println();
        }
    }
}


20) Inverted Full Pyraimd pattern:-


class main
 {
    public static void main(String[] args) {
        int n = 5; 

        for (int i = n; i >= 1; i--) {
            for (int j = i; j < n; j++) {
                System.out.print(" ");
            }
            for (int j = 1; j <= (2 * i - 1); j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}











